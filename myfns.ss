(define (myinterpreter prog)
    (evalExpr (car (cdr prog)) '())
)

; main eval function
(define (evalExpr expr bindings)
    (cond 
       ((integer? expr) expr)
       ((symbol? expr) (searchBindingList expr bindings))
       ((equal? 'planIf (car expr))
            (if (> (evalExpr (car (cdr expr)) bindings) 0) 
                (evalExpr (car (cdr (cdr expr))) bindings) 
                (evalExpr (car (cdr (cdr (cdr expr)))) bindings)
            )
       )
       ((equal? 'planAdd (car expr))
            (+ (evalExpr (car (cdr expr)) bindings) (evalExpr (car (cdr (cdr expr))) bindings))
       )
       ((equal? 'planMul (car expr))
            (* (evalExpr (car (cdr expr)) bindings) (evalExpr (car (cdr (cdr expr))) bindings))
       )
       ((equal? 'planSub (car expr))
            (- (evalExpr (car (cdr expr)) bindings) (evalExpr (car (cdr (cdr expr))) bindings))
       )
       ((equal? 'planLet (car expr))
            (evalExpr (car (cdr (cdr (cdr expr))))
                (cons (cons (car (cdr expr)) (evalExpr (car (cdr (cdr expr))) bindings)) bindings)
            )
       )
    )
)

(define (searchBindingList id list)
    (cond
        ((equal? id (car (car list))) (cdr (car list)))
        (#t (searchBindingList id (cdr list))) 
    )
)